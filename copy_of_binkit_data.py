# -*- coding: utf-8 -*-
"""Copy of Binkit data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yb0wZMaadRk_H9FhYpbmzl3sNyBVF-BY

**DATA ANALYSIS BLINKIT DATA PYTHON PROJECT**

Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Import Raw Data"""

df = pd.read_csv('/BlinkIT Grocery Data.csv')

"""Sample Data"""

df.head(20)

df.tail(10)

"""To Check the No. of Rows and No. of columns (SIZE OF DATA)"""

df.shape

print ("Sum of Data:", df.shape)

"""Feild Info"""

df.columns

"""Data Types"""

df.dtypes

"""Data Cleaning"""

print(df ['Item Fat Content'].unique())

df ['Item Fat Content'] = df ['Item Fat Content'].replace ({'LF': 'Low Fat',
                                                            'low fat': 'Low Fat',
                                                            'reg': 'Regular'})

print(df['Item Fat Content'].unique())

"""**BUSINESS REQUIREMENTS**

**KPI REQUIREMENTS**
"""

#Total Sales
total_sales = df['Sales'].sum()

#Average Sales
avg_sales = df['Sales'].mean()

#No of Items Sold
no_of_items_sold = df['Sales'].count()

#Average Ratings
avg_ratings = df['Rating'].mean()

#Display
print(f"Total Sales: ${total_sales:,.0f}")
print(f"Average Sales: ${avg_sales:,.1f}")
print(f"No. of Items Sold: {no_of_items_sold:,.0f}")
print(f"Average Ratings: {avg_ratings:,.1f}")

"""**  CHAT REQUIREMENTS**

**Total Sales by Fat Content**
"""

Sales_by_Fat = df.groupby('Item Fat Content')['Sales'].sum()

plt.pie(Sales_by_Fat, labels=Sales_by_Fat.index,
                               autopct='%.0f%%',
                                startangle = 90)


plt.title('Total Sales by Fat Content')
plt.axis('equal')
plt.show()

"""**Total Sales by Item Type**"""

sales_by_item_type = df.groupby('Item Type')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 6))
bars = plt.bar(sales_by_item_type.index, sales_by_item_type.values)
plt.xlabel('Item Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Item Type')
plt.xticks(rotation=-90)

for bar in bars:
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height(),
             f'(bar.get_height():,.0f)',ha='center', va='bottom', fontsize=6)

plt.tight_layout()
plt.show()

"""**FAT CONTENT BY OUTLET OF TOTAL SALES**"""

grouped = df.groupby(['Outlet Location Type', 'Item Fat Content']) ['Sales'].sum().unstack()
grouped = grouped[['Regular','Low Fat']]

ax = grouped.plot(kind='bar', figsize=(10,6), title = 'Outlet Tier by Item Fat Content')
plt.xlabel('Outlet Location Type')
plt.ylabel('Total Sales')
plt.legend(title='Item Fat Content')
plt.tight_layout()
plt.show()

"""**TOTAL SALES BY OUTLET ESTABLSHMENT**"""

Sales_by_year = df.groupby('Outlet Establishment Year')['Sales'].sum().sort_index()

plt.figure(figsize=(9,5))
plt.plot(Sales_by_year.index, Sales_by_year.values, marker='o', linestyle='-', color='b')

plt.xlabel('Outlet Establishment Year')
plt.ylabel('Total Sales')
plt.title('Outlet Establishment')

for x,y in zip(Sales_by_year.index, Sales_by_year.values):
    plt.text(x, y, f'${y:,.0f}', ha='center', va='bottom', fontsize = 8)


plt.tight_layout()
plt.show()

"""**SALES BY OUTLER SIZE**"""

sales_by_size = df.groupby('Outlet Size')['Sales'].sum()

plt.figure(figsize=(4,4))
plt.pie(sales_by_size, labels=sales_by_size.index, autopct='%1.1f%%', startangle=90)
plt.title(' Outlet Size')
plt.tight_layout()
plt.show()

"""**SALES BY OUTLET LOCATION**"""

sales_by_location = df.groupby('Outlet Location Type')['Sales'].sum().reset_index()
sales_by_location = sales_by_location.sort_values('Sales', ascending=False)

plt.figure(figsize=(8,3))
ax = sns.barplot(x='Sales', y= 'Outlet Location Type', data=sales_by_location)
plt.xlabel('Total Sales')
plt.ylabel('Outlet Location Type')
plt.title('Outlet Location Type')

plt.tight_layout()
plt.show()